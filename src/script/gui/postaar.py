# -*- coding: utf-8 -*-
"""
/***************************************************************************
 postAAR
                                 A QGIS plugin
 This plugin detects points forming a rectangular to mark potential houses.  
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-06-13
        git sha              : $Format:%H$
        copyright            : (C) 2019 by ISAAKiel
        email                : isaak@ufg.uni-kiel.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication, QVariant
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QAction, QMessageBox, QDockWidget 
from qgis.core import *
from qgis.gui import QgsMessageBar
from qgis.utils import iface

# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the dialog
from .postaar_dialog import postAARDialog
from .postaar_task import postAARTask


import os.path

# specific functions
import webbrowser
import subprocess
import os
import tempfile
import sys
import ntpath
import time



class postAAR:

    def __init__(self, iface):
        self.iface = iface
        self.plugin_dir = os.path.dirname(__file__)
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'postAAR_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)
        self.actions = []
        self.menu = self.tr(u'&postAAR')

        self.first_start = None

    def tr(self, message):
        return QCoreApplication.translate('postAAR', message)


    def add_action( self, icon_path, text, callback, enabled_flag=True, add_to_menu=True, add_to_toolbar=True, status_tip=None, whats_this=None, parent=None):

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        icon_path = ':/plugins/postAAR/img/postAAR.ico'
        self.add_action(
            icon_path,
            text=self.tr(u'postAAR - rectangles'),
            callback=self.run,
            parent=self.iface.mainWindow())

        self.first_start = True

    def unload(self):
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&postAAR'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        if self.first_start == True:
            self.first_start = False
            self.dlg = postAARDialog()

        self.dlg.show()

        result = self.dlg.exec_()
        if result == 1:
            task = postAARTask(
                self.iface,

                self.dlg.cmb_layer_selected.currentLayer(),
                self.dlg.cmb_postid.currentField(),
                self.dlg.maximum_length_of_side.value(),
                self.dlg.minimum_length_of_side.value(),
                self.dlg.maximal_bounding_area_difference.value() / 100.0,

                self.dlg.gBConstructBuilding.isChecked(),
                self.dlg.cBFindBuildingFast.isChecked(),

                self.dlg.gBUseMulticore.isChecked(),
                self.dlg.lEPythonDistribution.text(),
                int(self.dlg.cores.value()))
            task.start()
