# -*- coding: utf-8 -*-
"""
/***************************************************************************
 postAARDialog
                                 A QGIS plugin
 This plugin detects points forming a rectangular within defined margins to mark potential houses  
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2019-06-13
        git sha              : $Format:%H$
        copyright            : (C) 2019 by ISAAKiel
        email                : isaak@ufg.uni-kiel.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from PyQt5 import uic, QtWidgets
from PyQt5.QtGui import QIcon, QDialogButtonBox
from PyQt5.QtWidgets import QMessageBox

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'postaar_dialog_base.ui'))


class postAARDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(postAARDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        # self.cmb_postid.setEnabled(False)
        # self.maximum_length_of_side.setEnabled(False)
        # self.minimum_length_of_side.setEnabled(False)
        # self.maximal_length_difference.setEnabled(False)
        # self.btn_ok_abort.button(QDialogButtonBox.Ok).setEnabled(False)
        self.accepted.connect(self.checkvalues)

    def checkvalues(self):
        # Input values have to be checked
        postlayer = self.dlg.cmb_layer_selected.currentLayer()
        postid = self.dlg.cmb_postid.currentField()
        maximum_length_of_side = unicode(self.dlg.maximum_length_of_side.text())
        minimum_length_of_side = unicode(self.dlg.minimum_length_of_side.text())
        max_diff_side = unicode(self.dlg.maximal_length_difference.text())
        results_shape = unicode(self.dlg.save_outfile.filePath())

        # Layer selected?

        # CRS is not geografic?
        if postlayer.crs().isGeographic() == True:
            msg = "-  Layer " + postlayer.name() + " is not projected. Please choose an projected reference system. \n"

        # geometry type is point?
        if postlayer.geometryType() != 0:
            msg = msg + "-  Layer " + postlayer.name() + " is not a point geometry. Please choose an point geometry.\n"

        # ID field selected?
        if self.cmb_postid.currentField() == "":
            msg = msg + "-  please select a ID field \n" 

        if int(self.maximum_length_of_side.text()) < int(self.minimum_length_of_side.text()):
            msg = msg + "-  maximal length must be greater or equal to minimal length \n"
            # QMessageBox.information(self, 'postAAR dialog', "please select suitable max and min values")
            # return
        if self.save_outfile.filePath() == "":
            msg = msg + "-  please select a file for the results"
            # return
        QMessageBox.information(self, 'postAAR dialog', msg)
        return
            


