# -*- coding: utf-8 -*-
"""
/***************************************************************************
 postAARDialog
                                 A QGIS plugin
 This plugin detects points forming a rectangular within defined margins to mark potential houses  
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2019-06-13
        git sha              : $Format:%H$
        copyright            : (C) 2019 by ISAAKiel
        email                : isaak@ufg.uni-kiel.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from PyQt5 import QtCore, uic, QtWidgets
from PyQt5.QtWidgets import QMessageBox
from qgis.gui import QgsMessageBar
from qgis.utils import iface

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'postaar_dialog_base.ui'))


class postAARDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(postAARDialog, self).__init__(parent)
        self.setupUi(self)
        self.setSizeGripEnabled(False);
        self.setWindowFlags(QtCore.Qt.Dialog | QtCore.Qt.MSWindowsFixedSizeDialogHint)
    
    def accept ( self ):
        validInput = self.checkvalues()
        if validInput:
            self.done ( 1 )
        
        # self.accepted.connect(self.checkvalues)
        # if self.checkvalues == 0:
        #     print('checkvalues: ' + str(checkvalues))
        #     self = 0

    def checkvalues(self):
        # Input values have to be checked
        postlayer = self.cmb_layer_selected.currentLayer()
        postid = self.cmb_postid.currentField()
        maximum_length_of_side = float(unicode(self.maximum_length_of_side.text()))
        minimum_length_of_side = float(unicode(self.minimum_length_of_side.text()))
        max_diff_side = unicode(self.maximal_length_difference.text())

        # Layer selected?
        msg = "Please update the data\n\n"
        if not postlayer:
            msg = "-  Please select (active) a Layer.\n" 
        else:
            if postlayer.crs().isGeographic() == True:
                msg = "-  Layer " + postlayer.name() + " is not projected. Please choose an projected reference system. \n"
            # geometry type is point?
            if postlayer.geometryType() != 0:
                msg = msg + "-  Layer " + postlayer.name() + " is not a point geometry. Please choose an point geometry.\n"

        # ID field selected?
        if not postid:
            msg = msg + "-  Please select an ID field.\n" 

        # max length >= min length
        if maximum_length_of_side < minimum_length_of_side:
            msg = msg + "-  Maximal length must be greater or equal to minimal length.\n"

        if len(msg)>30:
            QMessageBox.critical(self, "postAAR input dialog", msg)
            return False

        # the id column has unique values?
        iface.messageBar().pushMessage("Info", "Checking for duplicate ID's")
        postslist=[]
        for f in postlayer.getFeatures():
            pid = f[postid]
            postslist.append(pid)

        seen = []
        duplicates = []
        for x in postslist:
            if x in seen:
                duplicates.append(x)
            seen.append(x)

        if len(duplicates) > 0:
            msg = "Selected field "+ postid + " has duplicate values:" + str(len(duplicates))
            msg = msg + "\nFirst duplicate value: " + str(duplicates[0])
            msg = msg + "\n\n Press [OK] to continue [Cancel] to exit."
            resp = QMessageBox.question(self, 'postAAR input dialog', msg, QMessageBox.Ok | QMessageBox.Cancel, QMessageBox.Ok)
            if resp != 1024:
                return False
        return True
